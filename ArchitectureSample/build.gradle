// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        daggerVersion = '2.16'
        kotlin_version = '1.3.11'
        retrofitVersion = '2.3.0'
        okhttpVersion = '3.11.0'
        moshiVersion = '1.8.0'
        archCompomentVersion = '2.0.0'
        archLifecycleVersion = '1.1.1'
        roomVersion = '2.1.0-alpha03'
        moshiKotlinVersion = '1.5.0'
        moshiConverterVersion = '2.3.0'
        rxJavaAdapterVersion = '2.3.0'
        rxAndroidVersion = '2.0.2'
        rxJava2Version = '2.1.0'
        appCompatVersion = '1.0.2'
    }

    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.triplet.gradle:play-publisher:2.0.0-rc1'
        classpath 'org.ajoberstar:grgit:1.5.0'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }

    ext.gitSha1 = { ->
        try {
            def stdout = new ByteArrayOutputStream()
            exec {
                commandLine 'git', 'rev-parse', 'HEAD'
                standardOutput = stdout
            }
            return stdout.toString().trim()
        } catch (ignored) {
            return null
        }
    }

    ext.gitBranch = { ->
        try {
            def stdout = new ByteArrayOutputStream()
            exec {
                commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
                standardOutput = stdout
            }
            return stdout.toString().trim()
        } catch (ignored) {
            return null
        }
    }

    ext.versionCode = { ->
        try {
            def stdout = new ByteArrayOutputStream()
            exec {
                commandLine 'git', 'rev-list', '--count', 'HEAD'
                standardOutput = stdout
            }
            return Integer.parseInt(stdout.toString().trim())
        } catch (ignored) {
            return -1
        }
    }

    ext.versionName = { ->
        try {
            def stdout = new ByteArrayOutputStream()
            exec {
                commandLine 'git', 'describe', '--tags', '--dirty'
                standardOutput = stdout
            }
            return stdout.toString().trim()
        } catch (ignored) {
            return null
        }
    }
}


project.ext {
    compileSdkVersion = 28
    buildToolsVersion = "28.0.3"

    minSdkVersion = 23
    targetSdkVersion = 28
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
